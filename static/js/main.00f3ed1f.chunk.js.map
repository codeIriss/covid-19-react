{"version":3,"sources":["Components/Cards/Cards.js","api/index.js","Components/Chart/Chart.js","Components/Country/Country.js","App.js","serviceWorker.js","index.js","Components/images/image.png"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","console","log","lineChart","Length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","Country","handleCountryChange","fetchedCountries","setFetchCountries","fetchedAPI","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","image","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.00f3ed1f.chunk.js","sourcesContent":["import React from 'react';\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport './Cards.css';\n\nexport const Cards = ({data:{confirmed,recovered,deaths,lastUpdate}}) =>  {\n    // console.log(props);\n    if(!confirmed){\n        return('Loading...')\n    }\n   \n    return (\n       \n        <div className=\"container\">\n           <Grid container spacing={3} justify=\"center\">\n            <Grid item component={Card} xs={12} md={3} className=\"card infected\" >\n                <CardContent >\n                    <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                    <Typography variant=\"h5\"><CountUp start={0} end={confirmed.value} duration={1.5} separator=\",\"/></Typography>\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                    <Typography variant=\"body2\">Number of active cases of covid-19</Typography>\n                </CardContent>\n            </Grid>\n            <Grid item component={Card}  xs={12} md={3} className=\"card recovered\">\n                <CardContent >\n                    <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                    <Typography variant=\"h5\"><CountUp start={0} end={recovered.value} duration={1.5} separator=\",\"/></Typography>\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                    <Typography variant=\"body2\">Number of Recovery</Typography>\n                </CardContent>\n            </Grid>\n            <Grid item component={Card}  xs={12} md={3} className=\"card deaths\">\n                <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                    <Typography variant=\"h5\"><CountUp start={0} end={deaths.value} duration={1.5} separator=\",\"/></Typography>\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                    <Typography variant=\"body2\">Number of deaths</Typography>\n                </CardContent>\n            </Grid>\n\n           </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios';\n\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n    if(country){\n        changeableUrl = `${url}/countries/${country}`\n    }\n    try {\n\n        const {data} = await axios.get(changeableUrl);\n        const modifiedData = {\n            confirmed : data.confirmed,\n            recovered : data.recovered,\n            deaths : data.deaths,\n            lastUpdate : data.lastUpdate,\n\n        }\n        return modifiedData;\n    }\n    catch(error){\n\n    }\n}\n\nexport const fetchDailyData = async () =>\n{\n    try{\n        const {data} = await axios.get(`${url}/daily`);\n        const modifiedData = data.map((dailyData) => ({\n         confirmed: dailyData.confirmed.total,\n         deaths: dailyData.deaths.total,\n         date: dailyData.reportDate,\n\n        }));\n        return modifiedData;\n    }\n    catch(error){\n\n    }\n}\n\nexport const fetchCountries = async () =>\n{\n    try{\n        const {data:{countries}} = await axios.get(`${url}/countries`);\n        return countries.map((country)=> {return country.name});\n\n        \n    }\n    catch(error){\n\n    }\n}\n\n","import React,{useState,useEffect} from 'react';\nimport {fetchDailyData } from '../../api/index';\nimport { Line ,Bar} from 'react-chartjs-2';\n\nimport './Chart.css';\n\nconst Chart = ({data:{confirmed,recovered,deaths},country}) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n        setDailyData( await fetchDailyData());\n        }\n        fetchAPI();\n    },[]);\n\n    console.log(confirmed,recovered,deaths);\n    const lineChart = (\n        dailyData.Length !== 0 ?\n       ( <Line data={{\n            labels: dailyData.map(({date}) => date),\n            datasets:[{\n                data: dailyData.map(({confirmed}) => confirmed),\n                label: 'Infected',\n                borderColor:'#01CBC6',\n                fill:true,\n            },{\n                data: dailyData.map(({deaths}) => deaths),\n                label: 'Deaths',\n                borderColor:'#red',\n                backgroundColor: '#EA425C',\n                fill:true,\n            }],\n            \n        }}\n        />) : null\n    );\n\n\n    const barChart = (\n        confirmed ? \n        <Bar\n            data={{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [{label: 'People',\n                backgroundColor:['#01CBC6','#1BCA9B','#EA425C'],\n                data:[confirmed.value,recovered.value,deaths.value]\n                }]\n            }}\n            options={{\n                legend: {display:false},\n                title: {display: true, text:` Country Data : ${country} `}\n            }}\n        /> : null\n    );\n    return (\n        <div className=\"container\">\n            {country ? (barChart ): lineChart}\n        </div>\n    )\n}\n\nexport default Chart;\n","import React,{useState,useEffect} from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core';\nimport './Country.css';\nimport {fetchCountries} from '../../api/index';\nimport './Country.css';\n\n\n\nconst Country = ({handleCountryChange}) => {\n    const[fetchedCountries, setFetchCountries] = useState([]);\n    useEffect(() => {\n        const fetchedAPI  = async () => {\n             setFetchCountries(await fetchCountries());\n        }\n        fetchedAPI();\n    \n    },[setFetchCountries]);\n    return (\n        <FormControl className=\"formControl\">\n            <NativeSelect  defaultValue=\"\" onChange={(e)=> handleCountryChange(e.target.value)}>\n                <option  value=\"\">Global</option>\n                {fetchedCountries.map((country,i) => <option  value={country} key={i}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\n\nexport default Country;\n","import React, { Component } from 'react'\nimport Cards from './Components/Cards/Cards';\nimport Chart from './Components/Chart/Chart';\nimport Country from './Components/Country/Country';\nimport {fetchData} from './api/index';\nimport image from './Components/images/image.png';\nimport './App.css';\n\nexport default class App extends Component {\n  state={\n    data:{},\n    country: '',\n  }\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({data: fetchedData});\n    \n  }\n\n  handleCountryChange = async (country) => {\n    //fetch the data\n    const fetchedData = await fetchData(country);\n    //set the state\n    this.setState({data: fetchedData, country:country});\n  }\n  render() {\n    const {data, country} = this.state;\n    return (\n      \n      <div className=\"container\">\n        <img className=\"image\" src={image} alt=\"COVID-19\" />\n        <Country handleCountryChange={this.handleCountryChange}/>\n        <Cards data={data}/>\n        <Chart data={data} country={country} />\n\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/image.7646a23d.png\";"],"sourceRoot":""}